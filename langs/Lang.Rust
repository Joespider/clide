#!/usr/bin/env bash

SupportV="0.1.53"
Lang=Rust
LangExt=".rs"
ColorNum=1
UseTypeOfCpl=${TypeOfCpl}

#Handle Pipes
#{
ThePipe=""
if readlink /proc/$$/fd/0 | grep -q "^pipe:"; then
	ThePipe="Pipe"
fi
#}

CplArgs=${RunCplArgs}
TheCode=${TheSrcCode}

errorCode()
{
	if [ -d ${LibDir} ] && [ -f ${LibDir}/errorCode.sh ]; then
		${LibDir}/errorCode.sh "${@}"
	fi
}

#Handle Aliases
AddAlias()
{
	if [ -d ${LibDir} ] && [ -f ${LibDir}/AddAlias.sh ]; then
		${LibDir}/AddAlias.sh "${@}"
	fi
}

OtherColor()
{
	local text=$1
	#Return Purple
	echo -e "\e[1;35m${text}\e[0m"
}

ProjectTemplateHandler()
{
	if [ -d ${LibDir} ] && [ -f ${LibDir}/ProjectTemplateHandler.sh ]; then
		${LibDir}/ProjectTemplateHandler.sh ${Lang} "${@}"
	fi
}

UseRust()
{
	local LangConfig=${cplRust}
	local LangCpl=${LangConfig}
	local UseDebugger=${debugRust}

	local LangHome=${ProgDir}/${Lang}
	local LangSrc=${LangHome}/src
	local LangBin=${LangHome}/bin
	local LangProject=${LangHome}/projects

	local TemplateCode=${NewRust}
	TemplateCode=${LangBin}/${TemplateCode%${LangExt}}

	local TemplateCodeSrc=${NewRust%${LangExt}}${LangExt}
	local TemplateCodeArgs=${NewRustArgs}

	local EnvVars=( ${LangCpl} ${LangHome} ${LangSrc} ${LangBin} ${LangExt} )
	local Type=$1
	shift
	case ${Type} in
		Art)
			#https://textkool.com/en/ascii-art-generator
			#Font: Roman
			#Width: default
			#height: default
			local srt="\e[1;3${ColorNum}m"
			local end="\e[0m"
			echo -e "${srt}ooooooooo.${end}                            ${srt}.${end}"
			echo -e "${srt}\`888${end}   ${srt}\`Y88.${end}                        ${srt}.o8${end}"
			echo -e " ${srt}888${end}   ${srt}.d88'${end} ${srt}oooo${end}  ${srt}oooo${end}   ${srt}.oooo.o${end} ${srt}.o888oo${end}"
			echo -e " ${srt}888ooo88P'${end}  ${srt}\`888${end}  ${srt}\`888${end}  ${srt}d88(${end}  ${srt}\"8${end}   ${srt}888${end}"
			echo -e " ${srt}888\`88b.${end}     ${srt}888${end}   ${srt}888${end}  ${srt}\`\"Y88b.${end}    ${srt}888${end}"
			echo -e " ${srt}888${end}  ${srt}\`88b.${end}   ${srt}888${end}   ${srt}888${end}  ${srt}o.${end}  ${srt})88b${end}   ${srt}888${end} ${srt}.${end}"
			echo -e "${srt}o888o${end}  ${srt}o888o${end}  ${srt}\`V88V\"V8P'${end} ${srt}8\"\"888P'${end}   ${srt}\"888\"${end}"
			echo ""
			;;
		Lang-Type)
			local Get=$1
			case ${Get} in
				classified)
					echo "Programming"
					;;
				executable)
					echo "Binary"
					;;
				runtime)
					echo "Compiled"
					;;
				*)
					local Classified=$(UseRust ${Type} classified)
					local Exe=$(UseRust ${Type} executable)
					local RunTime=$(UseRust ${Type} runtime)
					echo -e "Classified:\t${Classified}"
					echo -e "Executable:\t${Exe}"
					echo -e "Runtime:\t${RunTime}"
					;;
			esac
			;;
		color)
		#Return Red
			echo -e "\e[1;3${ColorNum}m${Lang}\e[0m"
			;;
		color-number)
			echo "${ColorNum}"
			;;
		ProjectColor)
			local TheText=$1
			if [ -z "${TheText}" ]; then
				echo -e "\e[1;4${ColorNum}m${CodeProject}\e[0m"
			else
				echo -e "\e[1;4${ColorNum}m${TheText}\e[0m"
			fi
			;;
		getNewCode)
			echo ${TemplateCodeSrc}
			;;
		getSrcDir)
			echo ${LangSrc}
			;;
		getProjDir)
			echo ${LangProject}
			;;
		getExt)
			echo ${LangExt}
			;;
		SupportVersion)
			echo ${SupportV}
			;;
		MenuHelp)
			echo -e "new <file>\t\t\t: \"create new ${Lang} source code\""
			echo -e "compile, cpl <type>\t\t: \"make code executable\""
			local project=${CodeProject}
			case ${project} in
				none)
					;;
				*)
					echo -e "\t--release\t\t\t: \"make code (release) executable\""
					;;
			esac
			;;
		ProjectHelp)
			echo ""
			echo -e "${Lang} specific project help"
			echo ""
			;;
		getProjectDir)
			local project=${CodeProject}
			local UseProjectTemplate
			case ${project} in
				none)
					echo ${LangProject}
					;;
				*)
					UseProjectTemplate=$(ProjectTemplateHandler ${ProjectType} --check ${Type})
					echo ${LangProject}/${project}
					;;
			esac
			;;
		getAllProjSrc)
			local project=${CodeProject}
			local TheSrcDir=${LangProject}/${project}/src
			find ${TheSrcDir} -name *"${LangExt}" 2> /dev/null
			;;
		getProjSrc)
			local name=$1
			local project=${CodeProject}
			local TheSrcDir=${LangProject}/${project}/src
			if [ ! -z "${name}" ]; then
				find ${TheSrcDir} -name "${name}" 2> /dev/null
			fi
			;;
		getDebugVersion)
			local debugV=$(${UseDebugger} --version 2> /dev/null | head -n 1)
			if [ ! -z "${debugV}" ]; then
				echo "${debugV}"
			fi
			;;
		pgLang)
			local ShowCpl=$1
			if [ ! -z "${ShowCpl}" ]; then
				echo "${LangCpl}/cargo"
			else
				local HasLang=$(which ${LangCpl} 2> /dev/null)
				if [ ! -z "${HasLang}" ]; then
					#Return Rust tag
					echo "${Lang}"
				else
					#Return rejection
					echo "no"
				fi
			fi
			;;
		hasExt)
			local SourceFile=$1
			if [ ! -z "${SourceFile}" ]; then
				case ${SourceFile,,} in
					*${LangExt})
						echo ${Lang}
						;;
					*)
						;;
				esac
			fi
			;;
		removeExt)
			local SourceFile=$1
			if [ ! -z "${SourceFile}" ]; then
				case ${SourceFile} in
					*${LangExt})
						echo ${SourceFile%${LangExt}}
						;;
					*)
						echo ${SourceFile}
						;;
				esac
			fi
			;;
		getBin)
			local srcCode=$1
			if [ ! -z "${srcCode}" ]; then
				local TheCpl
				local TheItem
				local CplList=$(UseRust lscpl | tr '\n' '|')
				for TheItem in ${srcCode//,/ };
				do
					TheItem=$(UseRust "removeExt" ${TheItem})
					TheCpl=$(echo -e "${CplList//|/\\n}" | grep -w ${TheItem})
					if [ ! -z "${TheCpl}" ]; then
						break
					fi
				done
				echo ${TheCpl}
			fi
			;;
		getCode)
			local name=$1
			name=$(UseRust "removeExt" ${name})
			local project=${CodeProject}
			local UseProjectTemplate
			local newName
			local DirPath
			local TheSrcDir
			case ${project} in
				none)
					TheSrcDir=${LangSrc}
					;;
				*)
					UseProjectTemplate=$(ProjectTemplateHandler ${ProjectType} --check ${Type})
					case ${ProjectType} in
						${ProjectDefaultType})
							case ${name} in
								*.*)
									newName=${name##*.}
									DirPath=$(echo ${name%${newName}} | tr '.' '/')
									TheSrcDir="${LangProject}/${project}/src/${DirPath}"
									name=${newName}
									;;
								*/*)
									newName=${name##*/}
									DirPath=${name%${newName}}
									TheSrcDir="${LangProject}/${project}/src/${DirPath}"
									name=${newName}
									;;
								*)
									TheSrcDir="$(pwd)/"
									;;
							esac
							;;
						*)
							TheSrcDir=$(ProjectTemplateHandler "${EnvVars[@]}" ${Type} ${mode})
							;;
					esac
					;;
			esac

			if [ -f ${TheSrcDir}/${name}${LangExt} ]; then
				echo ${name}${LangExt}
			elif [ -f ${TheSrcDir}/${name} ]; then
				echo ${name}
			fi
			;;
		BeforeFiles|AfterFiles)
			ls *${LangExt}
			;;
		pgDir)
			#Return Rust src Dir
			echo ${LangSrc}
			;;
		CreateHelp)
			;;
		shell)
			;;
		newCodeHelp)
			if [ -f ${TemplateCode} ]; then
				echo -e "\t-c, --custom <args>\t\t: \"Custom src file using ${Lang} template\""
				echo -e "\t-s, --show <args>\t\t: \"Show custom src code from ${Lang} template without saving\""
			fi
			;;
		EnsureDirs)
			if [ ! -z "${LangCpl}" ]; then
				#Home
				if [ ! -d "${LangHome}" ]; then
					mkdir -p "${LangHome}"
				fi
				#Src
				if [ ! -d "${LangSrc}" ]; then
					mkdir -p "${LangSrc}"
				fi
				#Bin
				if [ ! -d "${LangBin}" ]; then
					mkdir -p "${LangBin}"
				fi
				#projects
				if [ ! -d "${LangProject}" ]; then
					mkdir -p "${LangProject}"
				fi
			fi
			;;
		TemplateVersion)
			if [ -f ${TemplateCode} ]; then
				echo -n "${TemplateCode##*/} "
				${TemplateCode} 2> /dev/null | grep Version | sed "s/Version//g"
			else
				echo "no ${TemplateCode##*/} found"
			fi
			;;
		CplVersion)
			echo -e "\e[1;4${ColorNum}m[${Lang} Compiler]\e[0m"
			${LangCpl} --version
			cargo -V
			echo ""
			;;
		selectCode|addCode)
			local name=$1
			local new=$2
			local project=${CodeProject}
			local UseProjectTemplate
			local newName
			local DirPath
			local TheSrcDir
			#Correct filename
			if [ ! -z "${name}" ]; then
				name=$(UseRust "removeExt" ${name})
				name=${name}${LangExt}
				case ${project} in
					#not a project
					none)
						case ${Type} in
							addCode)
								case ${new} in
									*${LangExt})
										if [ -f "${new}" ]; then
											echo "${name},${new}"
										else
											echo "${name}"
										fi
										;;
									*)
										if [ -f "${new}${LangExt}" ]; then
											echo "${name},${new}${LangExt}"
										else
											echo "${name}"
										fi
										;;
								esac
								;;
							selectCode)
									#Return source file if exists
									if [ -f "${name}" ]; then
										echo "${name}"
									fi
									;;
							*)
									;;
						esac
						;;
					#is a project
					*)
						UseProjectTemplate=$(ProjectTemplateHandler ${ProjectType} --check ${Type})
						local LookFor
						TheSrcDir="${LangProject}/${project}/src/"
						case ${Type} in
							addCode)
								new=$(UseRust "removeExt" ${new})
								new=${new}${LangExt}
								LookFor=${new}
								;;
							selectCode)
								name=$(UseRust "removeExt" ${name})
								name=${name}${LangExt}
								LookFor=${name}
								;;
							*)
								;;
						esac

						local NumFound=$(find ${TheSrcDir} -name ${LookFor} 2> /dev/null | wc -l)
						case ${NumFound} in
							0)
								;;
							1)
								case ${Type} in
									addCode)
										new=$(find ${TheSrcDir} -name ${new} 2> /dev/null)
										if [ -f ${new} ]; then
											new=$(UseRust "removeExt" ${new})
											newName=${new##*/}
											echo "${name},${newName}${LangExt}"
										else
											echo "${name}"
										fi
										;;
									selectCode)
										name=$(find ${TheSrcDir} -name ${name} 2> /dev/null)
										if [ -f ${name} ]; then
											name=$(UseRust "removeExt" ${name})
											newName=${name##*/}
											echo ${newName}${LangExt}
										fi
										;;
									*)
										;;
								esac
								;;
							*)
								;;
						esac
					;;
				esac
			fi
			;;
		rmBin|rmSrc)
			local name=$1
			name=$(UseRust "removeExt" ${name})
			local ThePath
			local theSrc
			local project=${CodeProject}
			local UseProjectTemplate

			if [ -z "${name}" ]; then
				case ${project} in
					none)
						;;
					*)
						UseProjectTemplate=$(ProjectTemplateHandler ${ProjectType} --check ${Type})
						name=${project}
						;;
				esac
			fi

			case ${Type} in
				rmBin)
					case ${project} in
						#not a project
						none)
							ThePath=${LangBin}
							;;
						*)
							ThePath="${LangProject}/${project}/bin"
							;;
					esac
					;;
				rmSrc)
					case ${project} in
						#not a project
						none)
							ThePath=${LangSrc}
							;;
						*)
							ThePath="${LangProject}/${project}/src"
							;;
					esac
					name=${name}${LangExt}
					;;
				*)
					;;
			esac
	
			if [ -f ${ThePath}/${name} ]; then
				echo ${ThePath}/${name}
			else
				case ${Type} in
					rmSrc)
						cd ${ThePath}/
						name=$(UseRust "removeExt" ${name})
						theSrc=$(UseRust "getProjSrc" ${name}${LangExt})
						cd -> /dev/null
						if [ ! -z "${theSrc}" ]; then
							echo ${theSrc}
						fi
						;;
					*)
						;;
				esac
			fi
			;;
		editCode|readCode)
			local src=${TheCode}
			local num=$1
			local project=${CodeProject}
			local newName
			local DirPath
			local TheSrcDir
			local ReadOrEdit
			local HasAnExt

			#Select the tool
			#{
			case ${Type} in
				readCode)
					ReadOrEdit=${ReadBy}
					;;
				editCode)
					ReadOrEdit=${editor}
					;;
				*)
					;;
			esac
			#}

			HasAnExt=$(UseRust "hasExt" ${src})

			if [ ! -z "${HasAnExt}" ]; then
					case ${project} in
						none)
							if [[ "${src}" == *","* ]]; then
								if [ -z "${num}" ]; then
									#Error
									#{
									case ${Type} in
										readCode)
											errorCode "readNull"
											;;
										editCode)
											errorCode "editNull"
											;;
										*)
											;;
									esac
									#}
								else
									if [[ "${src}" == *"${num}"* ]]; then
										#Choose file from list of choices
										num=$(echo -e "${src//,/\\n}" | grep ${num})
										${ReadOrEdit} ${num}
									else
										#Error
										#{
										case ${Type} in
											readCode)
												errorCode "readNot"
												;;
											editCode)
												errorCode "editNot"
												;;
											*)
												;;
										esac
										#}
									fi
								fi
							else
								#Read or Write Code
								#{
								${ReadOrEdit} ${src}
								#}
							fi
							;;
						*)
							TheSrcDir="${LangProject}/${project}/src/"
							local NumFound
							if [[ "${src}" == *","* ]]; then
								if [ -z "${num}" ]; then
									errorCode "editNull"
									NumFound=0
								else
									if [[ "${src}" == *"${num}"* ]]; then
										if [[ "${num}" == *"${LangExt}" ]]; then
											src=${num}
										else
											src=${num}${LangExt}
										fi
										NumFound=$(find ${TheSrcDir} -name ${src} 2> /dev/null | wc -l)
									else
										#Error
										#{
										case ${Type} in
											readCode)
												errorCode "readNot"
												;;
											editCode)
												errorCode "editNot"
												;;
											*)
												;;
										esac
										NumFound=0
										#}
									fi
								fi
							else
								NumFound=$(find ${TheSrcDir} -name ${src} 2> /dev/null | wc -l)
							fi

							case ${NumFound} in
								0)
									;;
								1)
									src=$(find ${TheSrcDir} -name ${src} 2> /dev/null)
									if [ -f ${src} ]; then
										#Read or Write Code
										#{
										${ReadOrEdit} ${src}
										#}
									fi
									;;
								*)
									local Select
									find ${TheSrcDir} -name ${src} 2> /dev/null | sed "s/\/${project}\/src\//|/1" | cut -d '|' -f 2 | nl
									echo -n "> "
									read Select
									Select=$(echo ${Select} | grep "^-\?[0-9]*$")
									if [ ! -z "${Select}" ]; then
										if [ ${Select} -le ${NumFound} ] && [ ${Select} -gt 0 ]; then
											src=$(find ${TheSrcDir} -name ${src} 2> /dev/null | tr '\n' '|' | cut -d '|' -f ${Select})
											#Read or Write Code
											#{
											${ReadOrEdit} ${src}
											#}
										fi
									fi
									;;
							esac
							;;
					esac
			fi
			;;
		setCplArgs)
#			shift
#			shift
			local Vals="none"
			local Item=""
			local str=( "${@}" )
			local IFS=' '         # space is set as delimiter
			read -ra arg <<< "${str}"
			for TheItem in "${arg[@]}"; do
				if [ ! -z "${TheItem}" ]; then
					case ${TheItem} in
						-v|--verbose)
							Item="-v"
							;;
						-d|--debug)
							Item="-g"
							;;
						-w|--warnings)
							Item="-W"
							;;
						--edition=*)
							local stdVal=${TheItem}
							case ${stdVal} in
								--edition=)
									;;
								*)
									Item=${stdVal}
									;;
							esac
							;;
						*)
							;;
					esac
				fi
				if [ ! -z "${Item}" ]; then
					case ${Vals} in
						none)
							Vals=${Item}
							;;
						*${Item}*)
							;;
						*)
							Vals="${Vals} ${Item}"
							;;
					esac
				fi
				Item=""
			done
			echo ${Vals// /,}
			;;
		BuildHelp)
                        echo -e "*Default* (--release)"
                        echo -e "\t--release\t\t: \"Build project as a release\""
                        ;;
		setCplArgs-help)
			echo -e "-v, --verboses\t\t: \"Verbose (-v)\""
			echo -e "-d, --debug\t\t: \"Set Debugging (-g)\""
			echo -e "-w, --warnings\t\t: \"Show ALL warnings (-W)\""
			echo -e "--edition=<version>\t\t: \"Set ${Lang} version\""
			echo -e "\t\t2015"
			echo -e "\t\t2018"
			echo -e "\t\t2021"
			;;
		compileCode-message)
			local cplType=$1
			if [ ! -z "${cplType}" ]; then
				echo -e "\e[1;4${ColorNum}m[${Lang} Code Compiled (${cplType})]\e[0m"
			else
				echo -e "\e[1;4${ColorNum}m[${Lang} Code Compiled]\e[0m"
			fi
			;;
		compileType-list)
			echo -e "--release\t\t: \"build code as release\""
			;;
		compileType)
			local GetCplType=$1
			case ${GetCplType,,} in
				--release|release)
					echo "--release"
					;;
				*)
					;;
			esac
			;;
		compileCode)
			local src=${TheCode}
			local name=$1
			local keep=$2
			local cplArgs=${CplArgs//,/ }
			local project=${CodeProject}
			local UseProjectTemplate
			local TheBinDir
			local GetCount
			local ERROR
			#Handle Project Dir
			case ${project} in
				none)
					if [ ! -z "${src}" ]; then
						TheBinDir=${LangBin}
						#Handle multiple files
						if [[ "${src}" == *","* ]]; then
							if [ -z "${name}" ]; then
								src=${src//,/ }
								name=$(grep -l "fn main(" ${src} 2> /dev/null)

								if [ -z "${name}" ]; then
									echo "Unable to find the \"main\" file"
									echo -n "Please choose: "
									read name
									name=$(UseRust "removeExt" ${name})
									if [ ! -f ${LangSrc}/${name}${LangExt} ]; then
										name=""
									fi
								else
									if [ ! -z "${name}" ]; then
										name=$(UseRust "removeExt" ${name})
										src="${name}${LangExt}"
									fi
								fi
							fi
						else
							#If no file is given...find it in your select source code
							if [ -z "${name}" ]; then
								name=$(grep -l "fn main(" ${src} 2> /dev/null)
							else
								case ${name} in
									--*)
										#If it is given, but begins with --, try finding it in your select source code
										name=$(grep -l "fn main(" ${src} 2> /dev/null)
										;;
									*)
										;;
								esac
							fi
						fi

						#remove the extention in the event it was given
						name=$(UseRust "removeExt" ${name})

						#A file name was given or recovered
						if [ ! -z "${name}" ]; then
							#Set Code to executable
							case ${src} in
								*${LangExt})
									case ${cplArgs} in
										none)
											ERROR=$(${LangCpl} ${src} -o ${name} 2>&1 | tr '|' '.' | tr '\n' '|')
											;;
										*)
											ERROR=$(${LangCpl} ${src} -o ${name} ${cplArgs} 2>&1 | tr '|' '.' | tr '\n' '|')
											;;
									esac

									#Compile the binary if it is good
									if [ -z "${ERROR}" ]; then
										#Show compile message
										UseRust compileCode-message
										#move binary to Rust/bin/
										mv ${name} ${TheBinDir}/
									else
										#if random binary is left behind, remove it
										if [ -f ${LangSrc}/${name} ]; then
											rm ${LangSrc}/${name}
										fi
										#show error message
										errorCode "cpl" "ERROR" "${ERROR}"
									fi
									;;
								*)
									#show error message
									errorCode "cpl" "choose"
									;;
							esac
						else
							errorCode "cpl" "no-name"
						fi
					else
						errorCode "cpl" "choose"
					fi
					;;
				#Compile a project
				*)
					UseProjectTemplate=$(ProjectTemplateHandler ${ProjectType} --check ${Type})
					TheBinDir="${LangProject}/${project}/bin"
					#Go to project root directory
					cd ${LangProject}/${project}/
					#--release argument not given
					case ${UseTypeOfCpl} in
						--release)
							#Build as a release
							ERROR=$(cargo build --release --quiet 2>&1 | tr '|' '.' | tr '\n' '|')
							;;
						#Do a normal project build
						*)
							#Build as normal
							ERROR=$(cargo build --quiet 2>&1 | tr '|' '.' | tr '\n' '|')
							;;
					esac

					#Build was successful AND binary found in the 'debug' directory of project
					if [ -z "${ERROR}" ] && [ -f ${LangProject}/${project}/target/debug/${project} ]; then
						#Compile message
						UseRust compileCode-message
						#moe binary from 'debug' directory to the project's 'bin' directory
						mv ${LangProject}/${project}/target/debug/${project} ${TheBinDir}/
					#Build was successful AND binary found in the 'release' directory of project
					elif [ -z "${ERROR}" ] && [ -f ${LangProject}/${project}/target/release/${project} ]; then
						#Compile message with release
						UseRust compileCode-message "release"
						#moe binary from 'release' directory to the project's 'bin' directory
						mv ${LangProject}/${project}/target/release/${project} ${TheBinDir}/
					#Build was not successful
					else
						#No error message, but no binary was found
						if [ -z "${ERROR}" ]; then
							#display generic error message
							errorCode "cpl" "ERROR" "${project} binary not found"
						#Error message was shown
						else
							#display error message
							errorCode "cpl" "ERROR" "${ERROR}"
						fi
					fi
					#Go back to where ever you were
					cd - > /dev/null
					;;
			esac
			;;
		discoverProject)
			echo ${LangProject}
			;;
		newProject)
			local TheProjectType=$1
			local project=$2
			local path=${LangProject}/${project}
			local UseProjectTemplate
			if [ ! -d ${path} ]; then
				case ${ProjectType} in
					${ProjectDefaultType})
						cd ${LangProject}
						cargo new ${project} --quiet
						mkdir -p ${path}/bin
						;;
					*)
						UseProjectTemplate=$(ProjectTemplateHandler ${ProjectType} --check ${Type})
						if [ ! -z "${UseProjectTemplate}" ]; then
							ProjectTemplateHandler "${EnvVars[@]}" ${Type} ${project}
						fi
						;;
				esac
			else
				cd ${path}/src
			fi
			echo ${path}
			;;
		projectMode)
			local mode=$1
			local UseProjectTemplate
			case ${ProjectType} in
				${ProjectDefaultType})
					;;
				*)
					UseProjectTemplate=$(ProjectTemplateHandler ${ProjectType} --check ${Type})
					ProjectTemplateHandler "${EnvVars[@]}" ${Type} ${mode}
					;;
			esac
			;;
		lscpl)
			local project
			local path
			local UseProjectTemplate
			case ${CodeProject} in
				none)
					path=${LangBin}/
					;;
				*)
					UseProjectTemplate=$(ProjectTemplateHandler ${ProjectType} --check ${Type})
					project=${CodeProject}
					path=${LangProject}/${project}/bin/
					;;
			esac
			if [ -d ${path} ]; then
				ls --color=auto ${path}
			fi
			;;
		Install*)
			local bin=$1
			local BinFile="${bin%.*}"
			local project=${CodeProject}
			local TheBinDir
			local UseProjectTemplate
			local ThePath
			#Handle Project Dir
			case ${project} in
				none)
					project=""
					TheBinDir=${LangBin}
					;;
				*)
					UseProjectTemplate=$(ProjectTemplateHandler ${ProjectType} --check ${Type})
					project="${project}/"
					TheBinDir="${LangProject}/${project}bin"
					;;
			esac

			case ${Type} in
				Install-alias)
					#Make sure Binary exists
					if [ -f "${TheBinDir}/${BinFile}" ]; then
						#Add command to Aliases
						AddAlias "${BinFile}" "${TheBinDir}/${BinFile}"
					elif [ ! -f "${TheBinDir}/${BinFile}" ]; then
						#compile or swap to binary
						errorCode "install" "${BinFile}"
					else
						errorCode "noCode"
					fi
					;;
				Install-check)
					local IsAlias
					echo -n "Install-alias (~/.bash_aliases): "
					if [ -f ~/.bash_aliases ]; then
						IsAlias=$(grep "alias ${BinFile}=\"" ~/.bash_aliases)
						if [ ! -z "${IsAlias}" ]; then
							errorCode "HINT" "INSTALLED"
						else
							errorCode "ERROR" "NOT-INSTALLED"
						fi
					else
						errorCode "ERROR" "NOT-INSTALLED"
					fi

					echo -n "Install-bin (/bin): "
					if [ -f /bin/${BinFile} ]; then
						errorCode "HINT" "INSTALLED"
					else
						errorCode "ERROR" "NOT-INSTALLED"
					fi

					echo -n "Install-root (/usr/sbin): "
					if [ -f /usr/sbin/${BinFile} ]; then
						errorCode "HINT" "INSTALLED"
					else
						errorCode "ERROR" "NOT-INSTALLED"
					fi

					echo -n "Install-user (~/bin): "
					if [ -f ~/bin/${BinFile} ]; then
						errorCode "HINT" "INSTALLED"
					else
						errorCode "ERROR" "NOT-INSTALLED"
					fi
					;;
				Install-bin)
					ThePath="/bin"
					#Make sure Binary exists
					if [ -f "${TheBinDir}/${BinFile}" ]; then
						if [ -f ${ThePath}/${BinFile} ]; then
							errorCode "install" "already" "${BinFile}" "${ThePath}/"
							echo ""
							errorCode "HINT" "This must be done manually to protect from unwanted over-written binaries"
							errorCode "HINT" "command"
							case ${USER} in
								root)
									errorCode "HINT" "cp ${TheBinDir}/${BinFile} ${ThePath}/${BinFile}"
									;;
								*)
									errorCode "HINT" "sudo cp ${TheBinDir}/${BinFile} ${ThePath}/${BinFile}"
									;;
							esac
						else
							case ${USER} in
								root)
									cp ${TheBinDir}/${BinFile} ${ThePath}/${BinFile}
									;;
								*)
									sudo cp ${TheBinDir}/${BinFile} ${ThePath}/${BinFile}
									;;
							esac
						fi
					elif [ ! -f "${TheBinDir}/${BinFile}" ]; then
						#compile or swap to binary
						errorCode "install" "${BinFile}"
					else
						errorCode "noCode"
					fi
					;;
				Install-root)
					ThePath="/usr/sbin"
					#Make sure Binary exists
					if [ -f "${TheBinDir}/${BinFile}" ]; then
						if [ -f ${ThePath}/${BinFile} ]; then
							errorCode "install" "already" "${BinFile}" "${ThePath}/"
						else
							case ${USER} in
								root)
									cp ${TheBinDir}/${BinFile} ${ThePath}/${BinFile}
									;;
								*)
									sudo cp ${TheBinDir}/${BinFile} ${ThePath}/${BinFile}
									;;
							esac
						fi
					elif [ ! -f "${TheBinDir}/${BinFile}" ]; then
						#compile or swap to binary
						errorCode "install" "${BinFile}"
					else
						errorCode "noCode"
					fi
					;;
				Install-user)
					ThePath="~/bin"
					#Make sure Binary exists
					if [ -f "${TheBinDir}/${BinFile}" ]; then
						if [ -f ${ThePath}/${BinFile} ]; then
							errorCode "install" "already" "${BinFile}" "${ThePath}/"
						else
							if [ -d ${ThePath} ]; then
								cp ${TheBinDir}/${BinFile} ${ThePath}/${BinFile}
							else
								errorCode "ERROR"
								errorCode "ERROR" "${ThePath}/ does not exist"
							fi
						fi
					elif [ ! -f "${TheBinDir}/${BinFile}" ]; then
						#compile or swap to binary
						errorCode "install" "${BinFile}"
					else
						errorCode "noCode"
					fi
					;;
				*)
					;;
			esac
			;;
		exe-string)
			local bin=$1
			local BinFile="${bin%.*}"
			local project=${CodeProject}
			local TheBinDir
			local UseProjectTemplate
			#Handle Project Dir
			case ${project} in
				none)
					project=""
					TheBinDir=${LangBin}
					;;
				*)
					UseProjectTemplate=$(ProjectTemplateHandler ${ProjectType} --check ${Type})
					project="${project}/"
					TheBinDir="${LangProject}/${project}bin"
					;;
			esac

			#Make sure Binary exists
			if [ -f "${TheBinDir}/${bin}" ]; then
				echo "${TheBinDir}/${bin}"
			fi
			;;
		customCode)
			local cLang=$(UseRust "color")
			local cTemplate=$(OtherColor ${TemplateCode##*/})
			#Check for Custom Code Template
			if [ -f ${TemplateCode} ]; then
				shift
				shift
				shift
				shift
				Args=( "${@}" )
				if [ -z "${1}" ]; then
					echo -n "${cLang}\$ ./${cTemplate} "
					read -a Args
				fi
				#Program Args Given
				if [ ! -z "${Args}" ]; then
					${TemplateCode} "${Args[@]}"
				#No Program Name Given
				else
					${TemplateCode} --help
				fi
			else
				#Program Name Given
				errorCode "customCode" "notemp" "${Lang}"
			fi
			;;
		customCodeShow)
			local cLang=$(UseRust "color")
			local cTemplate=$(OtherColor ${TemplateCode##*/})
			#Check for Custom Code Template
			if [ -f ${TemplateCode} ]; then
				shift
				shift
				shift
				shift
				Args=( "${@}" )
				if [ -z "${1}" ]; then
					echo -n "${cLang}\$ ./${cTemplate} --no-save "
					read -a Args
				fi
				#Program Args Given
				if [ ! -z "${Args}" ]; then
					${TemplateCode} --no-save ${Args[@]}
				#No Program Name Given
				else
					${TemplateCode} --help
				fi
			else
				#Program Name Given
				errorCode "customCode" "notemp" "${Lang}"
			fi
			;;
		newCode)
			local name=$1
			local CodeType=$2
			local oldCode=$3
			local TheName
			local UseProjectTemplate
			local project=${CodeProject}
			local UseProjectTemplate

			#Sometimes "oldCode" gets passed as "Type"
			if [ -z "${oldCode}" ]; then
				case ${CodeType} in
					*${LangExt})
						oldCode=${CodeType}
						;;
					*)
						;;
				esac
			fi

			case ${project} in
				none)
					;;
				*)
					UseProjectTemplate=$(ProjectTemplateHandler ${ProjectType} --check ${Type})
					;;
			esac

			CodeType=${CodeType,,}
			name=$(UseRust "removeExt" ${name})

			if [ ! -f ${name}${LangExt} ]; then
				case ${CodeType} in
					#create main file
					main)
						if [ ! -f ${name}${LangExt} ]; then
							if [ -z "${UseProjectTemplate}" ]; then
								#Check for Custom Code Template
								if [ -f ${TemplateCode} ]; then
									#Program Name Given
									if [ ! -z "${name}" ]; then
										${TemplateCode} --name ${name} --main ${TemplateCodeArgs}
									#No Program Name Given
									else
										${TemplateCode} --help
									fi
								else
									#Program Name Given
									if [ ! -z "${name}" ]; then
										touch ${name}${LangExt}
										echo -e "fn main()\n{\n\tprintln!(\"main\");\n}" > ${name}${LangExt}
									else
										errorCode "newCode"
									fi
								fi
							else
								ProjectTemplateHandler ${ProjectType} ${Type} ${name}${LangExt} ${CodeType}
							fi
						fi
						;;
					#create component file
					component)
						if [ ! -f ${name}${LangExt} ]; then
							if [ -z "${UseProjectTemplate}" ]; then
								if [ -f ${TemplateCode} ]; then
									#Program Name Given
									if [ ! -z "${name}" ]; then
										${TemplateCode} --name "${name}" ${TemplateCodeArgs}
									#No Program Name Given
									else
										#Help Page
										${TemplateCode} --help
									fi
								else
									#Program Name Given
									if [ ! -z "${name}" ]; then
										touch ${name}${LangExt}
									else
										errorCode "newCode"
									fi
								fi
							else
								ProjectTemplateHandler ${ProjectType} ${Type} ${name}${LangExt} ${CodeType}
							fi
						fi
						;;
					#cl[ide] knows best
					*)
						#Because projects are walled off from the rest of your source code,while non-project code is shared,
						#Source code creation must be handled differently.
						#(non-project) accounts for what is "set"
						#(project) accounts for source code living in the directories
						case ${project} in
							#Is not a project
							none)
								#Looks like you have source code already set
								TheName=$(UseRust "removeExt" ${name})
								if [ ! -z "${oldCode}" ]; then
									UseRust "newCode" ${name} "component" ${oldCode}
								#No source code has been made, create a main file
								else
									UseRust "newCode" ${name} "main"
								fi
								;;
							#Is a project
							*)
								#Because a project can have source code scattered in different directories,
								#make sure you have one main component
								#Figure out how to account for headers
								local TheSrcDir="${LangProject}/${project}/src/"
								local HasSrcCode=$(find ${TheSrcDir} -type f -name "*${LangExt}")
								#Has Source Code
								if [ ! -z "${HasSrcCode}" ]; then
									TheName=$(UseRust "removeExt" ${name})
									local NumFound=$(find ${TheSrcDir} -name ${TheName}}${LangExt} 2> /dev/null | wc -l)
									case ${NumFound} in
										#No other source code was found...make your main file
										0)
											UseRust "newCode" ${name} "component" ${oldCode}
											;;
										*)
											;;
									esac
								#Make first source file
								else
									UseRust "newCode" ${name} "main" ${oldCode}
								fi
								;;
						esac
						;;
				esac
			fi
			;;
		cli)
			local TheName=$1
			local project=${CodeProject}
			#Handle Project Dir
			case ${project} in
				none)
					TheName=$(OtherColor "${TheName%.${LangExt}}")
					echo "./${TheName}"
					;;
				*)
					TheName=$(OtherColor "${project}")
					echo "./${TheName}"
					;;
			esac
			;;
		runCode|debug)
			local name=$1
			local UseProjectTemplate
			shift
			shift
			local Args=( "${@}" )
			local TheBin
			local project=${CodeProject}
			local TheBinDir
			local TheSrcDir

			#Handle Project Dir
			case ${project} in
				none)
					project=""
					TheBinDir=${LangBin}
					TheSrcDir=${LangSrc}
					TheBin=$(UseRust "removeExt" ${name})
					;;
				*)
					if [ ! -z "${project}" ]; then
						UseProjectTemplate=$(ProjectTemplateHandler ${ProjectType} --check ${Type})
						TheBinDir="${LangProject}/${project}/bin"
						TheSrcDir="${LangProject}/${project}/src"
						TheBin="${project}"
					else
						TheBin=""
					fi
					;;
			esac

			#Handle multiple src files
			if [[ "${name}" == *","* ]]; then
				case ${project} in
					none)
						#Find the main file
						if [ ! -z "${name}" ]; then
							if [ -d "${TheSrcDir}" ]; then
								cd ${TheSrcDir}
								name=${name//,/ }
								name=$(grep -l "fn main(" ${name} 2> /dev/null)
								if [ ! -z "${name}" ]; then
									TheBin=$(UseRust "removeExt" ${name})
								else
									TheBin=""
								fi
								cd - > /dev/null
							else
								TheBin=""
							fi
						fi
						;;
					*)
						;;
				esac
			fi

			#Find Executable
			if [ -f ${TheBinDir}/${TheBin} ]; then
				case ${Type} in
					debug)
						if [ ! -z "${ThePipe}" ]; then
							if [ -f "${MultiPipeFile}" ]; then
								if [ -z "${Args[0]}" ]; then
									cat ${MultiPipeFile} | ${UseDebugger} ${TheBinDir}/${TheBin}
								else
									cat ${MultiPipeFile} | ${UseDebugger} ${TheBinDir}/${TheBin} "${Args[@]}"
								fi
							else
								if [ -z "${Args[0]}" ]; then
									cat /dev/stdin | ${UseDebugger} ${TheBinDir}/${TheBin}
								else
									cat /dev/stdin | ${UseDebugger} ${TheBinDir}/${TheBin} "${Args[@]}"
								fi
							fi
						else
							if [ -z "${Args[0]}" ]; then
								${UseDebugger} ${TheBinDir}/${TheBin}
							else
								${UseDebugger} ${TheBinDir}/${TheBin} "${Args[@]}"
							fi
						fi
						;;
					runCode)
						if [ ! -z "${ThePipe}" ]; then
							if [ ! -z "${TimeRun}" ]; then
								if [ -f "${MultiPipeFile}" ]; then
									if [ -z "${Args[0]}" ]; then
										time cat ${MultiPipeFile} | ${TheBinDir}/${TheBin}
									else
										time cat ${MultiPipeFile} | ${TheBinDir}/${TheBin} "${Args[@]}"
									fi
								else
									if [ -z "${Args[0]}" ]; then
										time cat /dev/stdin | ${TheBinDir}/${TheBin}
									else
										time cat /dev/stdin | ${TheBinDir}/${TheBin} "${Args[@]}"
									fi
								fi
							else
								if [ -f "${MultiPipeFile}" ]; then
									if [ -z "${Args[0]}" ]; then
										cat ${MultiPipeFile} | ${TheBinDir}/${TheBin}
									else
										cat ${MultiPipeFile} | ${TheBinDir}/${TheBin} "${Args[@]}"
									fi
								else
									if [ -z "${Args[0]}" ]; then
										cat /dev/stdin | ${TheBinDir}/${TheBin}
									else
										cat /dev/stdin | ${TheBinDir}/${TheBin} "${Args[@]}"
									fi
								fi
							fi
						else
							if [ ! -z "${TimeRun}" ]; then
								if [ -z "${Args[0]}" ]; then
									time ${TheBinDir}/${TheBin}
								else
									time ${TheBinDir}/${TheBin} "${Args[@]}"
								fi
							else
								if [ -z "${Args[0]}" ]; then
									${TheBinDir}/${TheBin}
								else
									${TheBinDir}/${TheBin} "${Args[@]}"
								fi
							fi
						fi
						;;
				esac
			else
				case ${project} in
					none)
						errorCode "cpl" "need" "${name}"
						;;
					*)
						errorCode "cpl" "need" "${TheBin}"
						;;
				esac
			fi
			;;
		backup|backup-remove|restore)
			local name=$1
			name=$(UseRust "removeExt" ${name})
			name="${name}${LangExt}"
			local project=${CodeProject}
			local TheDir
			local TheCount
			local TheFound
			local UseProjectTemplate

			case ${project} in
				none)
					if [ ! -z "${name}" ]; then
						case ${Type} in
							restore)
								if [ -f "${LangSrc}/${name}.bak" ]; then
									mv ${LangSrc}/${name}.bak ${LangSrc}/${name}
									echo "\"${name}\" restored"
								else
									errorCode "restore" "exists"
								fi
								;;
							backup-remove)
								if [ -f "${LangSrc}/${name}.bak" ]; then
									rm ${LangSrc}/${name}.bak
									echo "\"${name}\" backup removed"
								else
									errorCode "backup" "exists"
								fi
								;;
							backup)
								if [ ! -f "${LangSrc}/${name}.bak" ]; then
									cp ${LangSrc}/${name} ${LangSrc}/${name}.bak
									echo "\"${name}\" backed-up"
								else
									errorCode "backup" "exists"
								fi
								;;
							*)
								;;
						esac
					else
						case ${Type} in
							restore)
								errorCode "restore" "null"
								;;
							backup)
								errorCode "backup" "null"
								;;
							*)
								;;
						esac
					fi
					;;
				*)
					UseProjectTemplate=$(ProjectTemplateHandler ${ProjectType} --check ${Type})
					case ${Type} in
						restore)
							if [ -f "${name}.bak" ]; then
								mv ${name}.bak ${name}
								echo "\"${name}\" restored"
							else
								TheCount=$(UseRust "getProjSrc" "${name}.bak" | wc -l)
								case ${TheCount} in
									0)
										errorCode "restore" "null"
										;;
									1)
										TheFound=$(UseRust "getProjSrc" "${name}.bak")
										mv ${TheFound} ${TheFound%.bak}
										echo "\"${name}\" restored"
										;;
									*)
										;;
								esac
							fi
							;;
						backup-remove)
							if [ -f "${name}" ] && [ -f "${name}.bak" ]; then
								rm ${name}.bak
								echo "\"${name}\" backup removed"
							else
								TheCount=$(UseRust "getProjSrc" "${name}" | wc -l)
								case ${TheCount} in
									0)
										errorCode "backup" "null"
										;;
									1)
										TheFound=$(UseRust "getProjSrc" "${name}")
										if [ -f "{TheFound}.bak" ]; then
											rm ${TheFound}.bak
											echo "\"${name}\" backup removed"
										fi
										;;
									*)
										;;
								esac
							fi
							;;
						backup)
							if [ -f "${name}" ] && [ ! -f "${name}.bak" ]; then
								cp ${name} ${name}.bak
								echo "\"${name}\" backed-up"
							else
								TheCount=$(UseRust "getProjSrc" "${name}" | wc -l)
								case ${TheCount} in
									0)
										errorCode "backup" "null"
										;;
									1)
										TheFound=$(UseRust "getProjSrc" "${name}")
										cp ${TheFound} ${TheFound}.bak
										echo "\"${name}\" backed-up"
										;;
									*)
										;;
								esac
							fi
							;;
						*)
							;;
					esac
					;;
			esac
			;;
		#create a copy of set code
		copy|rename)
			local Src=$1
			local New=$2
			local TheOld
			local TheNew
			local project=${CodeProject}
			local UseProjectTemplate
			case ${project} in
				none)
					if [ ! -z "${New}" ]; then
						TheOld=$(UseRust "removeExt" ${Src})
						TheNew=$(UseRust "removeExt" ${New})

						#Remove old file for "rename"
						case ${Type} in
							rename)
								mv ${LangSrc}/${TheOld}${LangExt} ${LangSrc}/${TheNew}${LangExt} 2> /dev/null
								;;
							copy)
								cp ${LangSrc}/${TheOld}${LangExt} ${LangSrc}/${TheNew}${LangExt} 2> /dev/null
								;;
							*)
								;;
						esac

						#return new file
						echo ${TheNew}${LangExt}
					fi
					;;
				*)
					UseProjectTemplate=$(ProjectTemplateHandler ${ProjectType} --check ${Type})
					#Check if extenion is given
					local HasAnExt
					local CheckForSrc
					local ThePath

					HasAnExt=$(UseRust "hasExt" ${Src})
					if [ ! -f ${Src} ]; then
						#Extension is NOT given
						if [ -z "${HasAnExt}" ]; then
							#Find src
							CheckForSrc=$(UseRust "getProjSrc" ${Src}${LangExt} 2> /dev/null)
							ThePath=${CheckForSrc%/*}
							Src=${CheckForSrc##*/}
						else
							CheckForFile=$(UseRust "getProjSrc" ${Src} 2> /dev/null)
							if [ ! -z "${CheckForFile}" ]; then
								ThePath=${CheckForFile%/*}
							fi
						fi
					fi

					TheOld=${Src}
					HasAnExt=$(UseRust "hasExt" ${New})
					if [ -z "${HasAnExt}" ]; then
						TheNew="${New}${LangExt}"
					else
						TheNew=${New}
					fi

					if [ ! -z "${TheOld}" ] && [ ! -z "${TheNew}" ]; then
						if [ ! -z "${ThePath}" ]; then
							cd ${ThePath}
							case ${Type} in
								rename)
									mv ${TheOld} ${TheNew} 2> /dev/null
									;;
								copy)
									cp ${TheOld} ${TheNew} 2> /dev/null
									;;
								*)
									;;
							esac
							echo ${TheNew}
							cd - > /dev/null
						else
							case ${Type} in
								rename)
									mv ${TheOld} ${TheNew} 2> /dev/null
									;;
								copy)
									cp ${TheOld} ${TheNew} 2> /dev/null
									;;
								*)
									;;
							esac
							echo ${TheNew}
						fi
					fi
					;;
			esac
			;;
		*)
			;;
	esac
}

#init
UseRust "${@}"
